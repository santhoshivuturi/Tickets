repartition vs coalecse:

-- The repartition algorithm does full shuffles and creates new partition with the data which is already distributed evenly

Example:
val x = (1 to 12).toList
val numbersDf = x.toDF("number")

numbersDf.rdd.partitions.size
-- when we check the number of partition now before we did anything will show the number of partition which are defaultly set for the spark
Output:
 Int = 12(in this case 12)

val numbersDfR = numbersDf.repartition(2)
-- after repartitioning the 12 partition which spark has evenly divided now will be converted and equally divided into 2 partition.

val numbersDfR = numbersDf.repartition(2)
output:
res3: Int = 2
-- the repartition makes new partitions and evenly and evenly distributed the data in new partitions

Difference between coalesce and repartition:
-- coalesce use the partition which are already present to minimise the amount of data is to be shuffled.
-- Repartition creates new partitions and does full shuffle.
-- coalesce return the partition with different different amount of data where as repartition will return roughly the equal amounts of data.

Is coalesce are repartition faster:
-- coalesce is faster but when we are working the data which is un evenly distributed is gonna take some time and where as repartition we can work fastly.
-- even though we do repartition or coalesce on the RDD which we have or the dataframe which we have the actualy RDD or dataframe will have same partitions but to change it is gonna create a new RDD or dataframe.





